name: CI to Docker Hub
on:
  push:
    branches: [main]

env:
  IMAGE_NAME: amongus-todo
  TEST_TAG: ${{ secrets.DOCKER_HUB_USERNAME }}/amongus-todo:test
  RELEASE_TAG: ${{ secrets.DOCKER_HUB_USERNAME }}/amongus-todo:lastest
  # EMAIL: james.ee.developer@gmail.com

jobs:
  npm-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Cache dependencies
        id: cache-step
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: v1-node-dependencies-${{ hashFiles('./package-lock.json') }}
          restore-keys: v1-node-dependencies-
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test

  # snyk-scan:
  #   needs: npm-tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Run Snyk to check for vulnerabilities
  #       uses: snyk/actions/node@master
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # docker-build-snyk:
  #   needs: [ npm-tests, snyk-scan ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Build and export to Docker
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         load: true
  #         tags: ${{ env.TEST_TAG }}

  #     - name: Run Snyk to check Docker images for vulnerabilities
  #       uses: snyk/actions/docker@master
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         image: ${{ env.TEST_TAG }}
  #         args: --severity-threshold=high
          
  # docker-push:
  #   needs: docker-build-snyk
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Build and push
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         platforms: linux/amd64
  #         push: true
  #         tags: ${{ env.RELEASE_TAG }}

  #     - name: Image digest
  #       run: |
  #         echo ${{ steps.docker_build.outputs.digest }}

  ansible-playbook:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          # Required, playbook filepath
          playbook: docker.yml
          # Optional, directory where playbooks live
          directory: ./ansible
          # Optional, SSH private key
          key: ${{secrets.SSH_PRIVATE_KEY}}
          # Optional, literal inventory file contents
          # inventory: |
          #   [all]
          #   example.com

          #   [group1]
          #   example.com
          # Optional, SSH known hosts file content
          # known_hosts: .known_hosts
          # # Optional, encrypted vault password
          # vault_password: ${{secrets.VAULT_PASSWORD}}
          # # Optional, galaxy requirements filepath
          # requirements: galaxy-requirements.yml
          # # Optional, additional flags to pass to ansible-playbook
          options: |
            --inventory ./ansible/inventory
            --verbose
  # heroku-deploy:
  #   needs: docker-build-snyk
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
  #       with:
  #         heroku_api_key: ${{secrets.HEROKU_API_KEY}}
  #         heroku_app_name: jamesee-${{ env.IMAGE_NAME }} #Must be unique in Heroku
  #         heroku_email: ${{ env.EMAIL }}
  #         usedocker: true

